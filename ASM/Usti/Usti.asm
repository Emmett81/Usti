#ruledef {
	nop	=>	0x00

	ld.x {bit} => 0x1 @ bit`3 @ 0x0`1
	ld.y {bit} => 0x1 @ bit`3 @ 0x1`1
	
	add.x {bit} => 0x2 @ bit`3 @ 0x0`1;
	add.y {bit} => 0x2 @ bit`3 @ 0x1`1;
	
	sub.x {bit} => 0x3 @ bit`3 @ 0x0`1;
	sub.y {bit} => 0x3 @ bit`3 @ 0x1`1;

	one => 0x4 @ 0x0

	nand.x {bit} => 0x5 @ bit`3 @ 0x0`1;
	nand.y {bit} => 0x5 @ bit`3 @ 0x1`1;

	or.x {bit} => 0x6 @ bit`3 @ 0x0`1;
	or.y {bit} => 0x6 @ bit`3 @ 0x1`1;
	
	xor.x {bit} => 0x7 @ bit`3 @ 0x0`1;
	xor.y {bit} => 0x7 @ bit`3 @ 0x1`1;

	sto.x {bit} => 0x8 @ bit`3 @ 0x0`1
	sto.y {bit} => 0x8 @ bit`3 @ 0x1`1
	
	stoi.x {bit} => 0x9 @ bit`3 @ 0x0`1 
	stoi.y {bit} => 0x9 @ bit`3 @ 0x1`1 

	jmp => 0xA @ 0x0`3 @ 0x0`1
	jmp.r => 0xA @ 0x1`3 @ 0x0`1
	jmp.rz => 0xA @ 0x2`3 @ 0x0`1
	jmp.c => 0xA @ 0x3`3 @ 0x0`1
	jmp.cz => 0xA @ 0x4`3 @ 0x0`1

	call => 0xA @ 0x0`3 @ 0x1`1
	call.r => 0xA @ 0x1`3 @ 0x1`1 
	call.rz => 0xA @ 0x2`3 @ 0x1`1 
	call.c => 0xA @ 0x3`3 @ 0x1`1
	call.cz => 0xA @ 0x4`3 @ 0x1`1

	ret => 0xB @ 0x0`3 @ 0x0`1
	ret.r => 0xB @ 0x1`3 @ 0x0`1
	ret.rz => 0xB @ 0x2`3 @ 0x0`1
	ret.c => 0xB @ 0x3`3 @ 0x0`1
	ret.cz => 0xB @ 0x4`3 @ 0x0`1

	x.ld {addr} => 0xC @ 0x0 @ addr`24
	x.sto {addr} => 0xC @ 0x1 @ addr`24
	x.zero => 0xC @ 0x2 
	x.one => 0xC @ 0x3 
	x.max => 0xC @ 0x4 

	y.ld {addr} => 0xC @ 0x8 @ addr`24
	y.sto {addr} => 0xC @ 0x9 @ addr`24
	y.zero => 0xC @ 0xA 
	y.one => 0xC @ 0xB
	y.max => 0xC @ 0xC 

	skz => 0xD @ 0x0

	rbt => 0xE @ 0x0 

	hlt => 0xF @ 0x0 
}
one
x.one
nand.x 0
x.zero
y.zero
// R=C=0, X = 0, y = 0